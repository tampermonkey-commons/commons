class JsonRpcRequest{constructor(e,s,t){this.jsonrpc="2.0",this.method=e,this.params=s,this.id=t}}class JsonRpcResponse{constructor(e,s){this.jsonrpc="2.0",this.result=e,this.error=null,this.id=s}}class JsonRpcWebSocketClient{constructor(e,s){this.version="0.6.0",this.name=e,this.url=s,this.webSocket=null,this.logger=new Logger("jsonrpc-wsc"),this.status="disconnected"}sleep=s=>new Promise(e=>setTimeout(e,s));async createWebSocket(e=null){null==e&&(e=this.url);let s=this;for(e=new WebSocket(e),e.addEventListener("open",e=>{s.onOpen(e)}),e.addEventListener("message",e=>{s.onMessage(e.data,e.origin,e.lastEventId,e.source,e.ports)}),e.addEventListener("close",e=>{s.onClose(e.code,e.reason,e.wasClean)}),e.addEventListener("error",e=>{s.onError(e)}),this.webSocket=e,e=new Date;await this.sleep(10),"connected"!=this.status;);return(new Date).getTime()-e.getTime()}onOpen(e){this.logger.info("与服务端 %s 连接已建立："+e,this.name),this.status="connected"}onMessage(e,s,t,n,o){this.logger.info("写收到来自服务端 %s 的报文 %s",this.name,e)}onClose(e,s,t){this.logger.info("与服务端 %s 连接断开，code=%d reason=%s",this.name,e,s)}onError(e){this.logger.info("与服务端 %s 通信发生错误："+e,this.name)}}